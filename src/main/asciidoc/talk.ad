:icons: font
:twitter-tag: UDE
:conference-tag:
:talk-tag: Intro Test&Clean
:linkattrs:
ifndef::partials[:partials: partials]

include::{partials}/footer.ad[]

== Introducción a SOLID, Unit Test & Clean Architecture

//== !
//image::pattern-design-4pwbdv1y.jpg[background, size=auto]
// Fuente: https://standaserigraf.wordpress.com/2015/09/30/pattern-design-tecnica-artistica-que-se-ocupa-de-la-creacion-de-patrones-graficos/
== Principios SOLID
* Single responsibility
* Open closed
* Liskov substitution
* Interface segregation
* Dependency injection

== Principio de Responsabilidad Única

*Un objeto debe realizar una única cosa*.

[NOTE.speaker]
====
Es muy habitual, si no prestamos atención a esto, que acabemos
teniendo clases que tienen varias responsabilidades lógicas a la vez.

====

== ¿Cómo detectar si estamos violando el Principio de Responsabilidad Única?

== !
* En una misma clase están involucradas dos capas de la arquitectura
* El número de métodos públicos
* Los métodos que usan cada uno de los campos de esa clase
* Por el número de imports

== !
* Nos cuesta testear la clase
* Cada vez que escribes una nueva funcionalidad, esa clase se ve afectada
* Por el número de líneas

== Ejemplo

[source,kotlin]
----
class Vehicle {
  private val wheelCount = 4
  private val maxSpeed = 200
  override fun toString():String {
    return "wheelCount=$wheelCount, maxSpeed=$maxSpeed"
  }
  fun print() {
    println(toString())
  }
}
----

== ¿Qué problema tiene esta clase?

== !

* Mezcla de lógica con presentación

== ¿Cómo arreglarlo?

== !
[source,kotlin]
----
class VehiclePrinter {
  fun print(vehicle:Vehicle) {
    println(vehicle)
  }
}
----

== Principio Open/Closed

*Una entidad de software debería estar abierta a extensión pero cerrada a modificación*.

== ¿Cómo detectar que estamos violando el principio Open/Closed?

== !
* Clases que modificamos más seguido (hits of code)

== Ejemplo

== !

[source,kotlin]
----
class Vehicle {
  //…
  val type:VehicleType
  //…
}
enum class VehicleType {
  CAR,
  MOTORBIKE;
}
fun draw(vehicle:Vehicle) {
    when (vehicle.type) {
      CAR -> drawCar(vehicle)
      MOTORBIKE -> drawMotorbike(vehicle)
    }
}
----

== ¿Qué podemos hacer para evitar tener que estar modificando el método `draw`?

== Polimorfismo

== !
[source,kotlin]
----
abstract class Vehicle {
  //…
  abstract fun draw()
}
class Car:Vehicle() {
  override fun draw() {
    // Draw the car
  }
}
class Motorbike:Vehicle() {
  override fun draw() {
    // Draw the motorbike
  }
}
----

== !
[source,kotlin]
----
fun draw(vehicle:Vehicle) {
  vehicle.draw()
}
class Truck:Vehicle() {
  override fun draw() {
    // Draw the truck
  }
}
----

== ¿Cuándo debemos cumplir con este principio?

* Depende, debe aplicarse cuando es necesario. La complejidad no siempre compensa.
* Un caso práctico es cuando hay partes de nuestro código que cambien mucho.

== Principio de Sustitución de Liskov

*Si en alguna parte de nuestro código estamos usando una clase, y esta clase es extendida, tenemos que poder utilizar cualquiera de las clases hijas y que el programa siga siendo válido.*

== ¿Cómo detectar que estamos violando el principio de sustitución de Liskov?
* Si un método sobrescrito no hace nada o lanza una excepción.

== Ejemplo

== !
[source,kotlin]
----
open class Rectangle {
  open var width:Int = 0
  open var height:Int = 0
  open fun calculateArea():Int {
    return width * height
  }
}
@Test
fun givenRectangle_whenCalculateArea_thenCorrectResult() {
  val r = Rectangle()
  r.width = 5
  r.height = 4

  val result = r.calculateArea()

  assertEquals(20, result)
}
----

== !
[source,kotlin]
----
class Square:Rectangle() {
  override var width:Int
  get() {
    return super.width
  }
  set(width) {
    super.width = width
    super.height = width
  }
  override var height:Int
  get() {
    return super.height
  }
  set(height) {
    super.height = height
    super.width = height
  }
}
----

== ¿Qué pasará si en el test cambiamos el rectángulo por un cuadrado?

== 16!=20

== ¿Qué podemos hacer?
* Usar interfaces, normalmente pequeñas.
* Inmutabilidad (Una vez que se ha creado un objeto, el estado del mismo no puede volver a modificarse)

== !
[source,kotlin]
----
interface IRectangle {
  fun calculateArea():Int
}
class Rectangle:IRectangle//…
class Square:IRectangle//…
----

== !
[source,kotlin]
----
class Rectangle(private val width:Int, private val height:Int)
class Square(private val side:Int):Rectangle(side, side)
----

== Principio de segregación de interfaces

*Ninguna clase debería depender de métodos que no usa.*

== ¿Cómo detectar que estamos violando el Principio de segregación de interfaces?

* Al implementar una interfaz ves que uno o varios de los métodos no tienen sentido y te hace falta dejarlos vacíos o
lanzar excepciones

== Ejemplo
[source,kotlin]
----
interface Product {
  fun name():String
  fun stock():Int
  fun numberOfDisks():Int
  fun releaseDate():Date
}
class CD:Product//…
----

== !
[source,kotlin]
----
interface Product {
  //…
  fun recommendedAge():Int
}
class CD:Product {
  //…
  override fun recommendedAge():Int {
    throw UnsupportedOperationException()
  }
}
----

== ¿Qué podemos hacer?

== !
[source,kotlin]
----
interface AgeAware {
  fun recommendedAge():Int
}
class CD:Product//…
class DVD:Product, AgeAware {
  fun checkUserCanBuy(user:User, ageAware:AgeAware):Boolean {
    return user.age >= ageAware.recommendedAge()
  }
  //…
}
----

== ¿Qué hacer con código antiguo?
* Usar el patrón adapter

== Principio de inversión de dependencias

* *Las clases de alto nivel no deberían depender de las clases de bajo nivel*. Ambas deberían depender de las abstracciones.
* *Las abstracciones no deberían depender de los detalles*. Los detalles deberían depender de las abstracciones.

== ¿Cómo detectar que estamos violando el Principio de inversión de dependencias?
* Cualquier instanciación de clases complejas o módulos es una
violación de este principio.

== Ejemplo

== !
[source,kotlin]
----
class ShoppingBasket {
  fun buy(shopping:Shopping) {
    val db = SqlDatabase()
    db.save(shopping)
    val creditCard = CreditCard()
    creditCard.pay(shopping)
  }
}
class SqlDatabase {
  fun save(shopping:Shopping) {
    // Saves data in SQL database
  }
}
class CreditCard {
  fun pay(shopping:Shopping) {
    // Performs payment using a credit card
  }
}
----

== ¿Cómo lo solucionamos?
[source,kotlin]
----
interface Persistence {
  fun save(shopping:Shopping)
}
class SqlDatabase:Persistence {
  override fun save(shopping:Shopping) {
    // Saves data in SQL database
  }
}
interface PaymentMethod {
  fun pay(shopping:Shopping)
}
class CreditCard:PaymentMethod {
  override fun pay(shopping:Shopping) {
    // Performs payment using a credit card
  }
}
----

== Ahora inyectamos las dependencias

== !
[source,kotlin]
----
class ShoppingBasket(private val persistence:Persistence, private val paymentMethod:PaymentMethod) {
  fun buy(shopping:Shopping) {
    persistence.save(shopping)
    paymentMethod.pay(shopping)
  }
}
class Server:Persistence {
  override fun save(shopping:Shopping) {
    // Saves data in a server
  }
}
class Paypal:PaymentMethod {
  override fun pay(shopping:Shopping) {
    // Performs payment using Paypal account
  }
}
----

== Testing

== ¿Por qué escribimos tests? icon:lightbulb[]

== ¿Por qué escribimos tests?
* Para asegurarnos que el código funciona
* ... pero escribir test automatizados es mucho más trabajo que simplemente escribir el `main` y validar entradas y salidas ...

== El software cambia icon:code[]

* Si el software cambia, los test deben cambiar con él
* Si cambiamos la estructura de nuestras clases, tenemos que adaptar los test, perder tiempo
* Si añadimos nuevas funcionalidades obviamente no vamos a tener tests
* Si arreglamos icon:bug[], al principio no vamos a tener test

== Refactoring icon:magic[]

No todos los cambios son funcionales

*Refactor* -- Proceso de de reestructurar un código fuente, alterando su estructura interna sin cambiar su comportamiento externo.

== Razones para hacer refactoring icon:magic[]
* Reparar icon:bug[] en el código (code smells)
* Pagar deuda técnica
* Mejorar rendimiento
* Actualizar API
* ...

== !
image::refactor-catalog.PNG[background, size=auto]
//Fuente: https://refactoring.com/catalog/

== Estrategias para hacer refactoring icon:magic[]
. Preparar el código para la nueva funcionalidad
. Añadir la nueva funcionalidad

== ¿Cuándo hacer refactoring icon:magic[]?
. Debería ser algo de todos los días
. Los IDEs ayudan a automatizar de manera segura refactors simples

== Regla del Boyscout
image::boy-scout-rule.jpeg[background, size=auto]
//Fuente: https://medium.com/@biratkirat/step-8-the-boy-scout-rule-robert-c-martin-uncle-bob-9ac839778385

== Refactors inseguros icon:exclamation-triangle[]
No todos los refactors son seguros:

* Inlining (efectos secundarios)
* Cambiar dependencias
* Cambiar algoritmos o estructuras de datos
* ... Cualquier cambio no trivial

== Refactors seguros icon:check[]

Para hacer refactor seguros, *tenemos que escribir tests*

No escribimos tests para asegurarnos que el código funcione

*Escribimos test para asegurarnos que siga funcionando*

== Usar tests icon:check[]
Si no se escriben test se crea *código legacy*.

image::legacy-code-sequence.PNG[]
Es una relación *cíclica*.

== Ciclo de refactor malo
image::bad-refactoring-cycle.PNG[background, size=auto]

== Ciclo de refactor bueno
image::good-refactoring-cycle.PNG[background, size=auto]

== Otras razones para hacer test

* Es una prueba de que el código funciona.
* Son una fuente de documentación, muestran las intenciones del código.
* Mejoran el diseño de la aplicación.

== Niveles de test

* Unit tests
* Integration tests
* End to End tests
* Acceptance / Business logic tests

[NOTE.speaker]
====
* Unit tests: Prueban una sola unidad del sistema. No tienen dependencias de los componentes externos del sistema BD, WS, API. Falsifican sus dependencias.
* Integration tests: Verifica que grupos de unidades puedan trabajar juntas correctamente.
* End-to-End tests: Prueba flujos completos de interacciones en el sistema. Se puede considerar como extensión de los test de integración. Tiene dependencias reales a los componentes del sistema, BD, WS, APIs.
* Acceptance / Business logic tests: Buscan responder la pregunta, ¿construimos lo que el cliente esperaba? Normalmente se centra en la historia del usuario y usan el lenguaje del negocio.
====

== ¿Qué porcentaje debo cubrir?

* 70% Unit tests
* 20% Integration
* 10%  End to End tests

== Pirámide de testing
image::pyramid.png[background, size=auto]

== ¿Qué es una unidad?

* Una clase (la mayoría de las veces)
* Muchas clases relacionadas
* Un paquete. Usualmente solo se prueba el API público, la interna y privada se prueba de manera implícita.

== Requisitos de un test

* Rápido
* Coherente
* Modular
* Independiente de la implementación

[NOTE.speaker]
====
* Rápido: Los tests unitarios deben ejecutarse rápidamente. Entre más pronto y frecuente se ejecuten, más temprano se van a detectar las fallas y corregirse.
Los tiempos de ejecución deben estar en el orden de los milisegundos. No deben tener acceso I/O y sus entradas deben ser las mínimas necesarias.
* Coherente: Leer test deben poderse leer de manera fácil. La idea es que revelen las intenciones del código de producción.
 Pueden ser usados como documentación. Deben estar escritos de manera estructurada y consistente.
* Modular: Unidad debe ser lo más pequeña posible. El objetivo es buscar que los test sean lo más pequeño posible también.
 Se prefiere escribir muchos pequeños test que grandes tests. En lo posible buscar tener un solo asssert por test (Pueden ser múltiples cuando se validan datos).
  Los test usualmente no deberían fallar por un problema en las dependencias.
* Independiente de la implementación: Los test deben validar la salida con respecto a una entrada.
Normalmente no se debe cambiar un test si la implementación cambia, solo se hace si cambia la funcionalidad externa.
  Se debe evitar escribir test que simplemente repitan el código de producción. El objetivo de los test es facilitar el refactor.
  Preferir en lo posible test de caja negra que de caja blanca.
** Caja negra: Se prueba la funcionalidad sin conocer su implementación.
** Caja blanca: Se prueba conociendo los detalles de la implementación.
====

== Estructura de un test
1. Arrange (Planificación)
2. Act (Acción)
3. Assert (Afirmación)

== !
[source, kotlin]
----
@Test
fun givenString_whenReverse_thenGetReverseString() {
  val input = "abc" // <1>

  val result = StringUtils.reverse(input) //<2>

  assertThat(result).isEqualTo("cba") //<3>
}
----

== Buenas Prácticas 1/2
* Evitar repetir código de producción.
* Se debe evitar escribir lógica en los test.
* Agregar al menos un test cuando se soluciona una falla.

[NOTE.speaker]
====
* El código de producción describe una solución general.
* El código del test es concreto.
* Se recomienda especificar entradas y salidas concretas en los test.
====

== Buenas Prácticas 2/2
* Evitar hacer test de métodos privados. Se debe probar las interfaces no las implementaciones.
* Antes de pasar, los test deben fallar.

[NOTE.speaker]
====
* Si se requiere probar un método privado se recomienda, extraer a una clase o en última instancia cambiar a package-private.
====

== ¿Los test nos hacen lentos?
* Los test nos ayudan a conseguir fallos. Por lo tanto, se introducen menos fallos.
* Nos permite agregar cambios con confianza. Mejora la productividad.

== Otros tipos de tests
* Behavior-driven development
* Property tests
* Mutation testing
* Design by Contract

[NOTE.speaker]
====
* Behavior-driven development: Usa un lenguaje específico del dominio para escribir los tests. Están estructurados en features e historias.
* Property tests: Maneja multiples entradas para validar el comportamiento de las salidas sin necesidad de fijarlas en el código.
* Mutation testing: Cambia el código fuente de los test para ver si fallan. Valida el acoplamiento entre los test y el código fuente.
Ofrece un mejor indicador que la cobertura.
* Design by Contract: Valida aserciones pre y post ejecución de los métodos. Se hace control en runtime. Se puede validar en tiempo de compilación usando anotaciones.
====

== Ok. Suena genial ¿Pero cómo pruebo mis dependencias?

== Testing doubles
* Dependencias como objetos específicos de los test.
* Dependencias simples llevan a menos errores.
* Facilidad para controlar su comportamiento.
* Facilidad para verificar su uso en los test.

[NOTE.speaker]
====
* Inicializar dependencias puede llevar mucho trabajo y pueden agregar errores.
* Pueden existir fallas en las dependencias.
* Operaciones de I/O van a ralentizar los tests.
* Usar las clases concretas de las dependencias van acoplar nuestros tests a la implementación.
====

== Tipos de test doubles
* Dummies
* Stubs
* Spikes
* Fakes
* Spies
* Mocks

[NOTE.speaker]
====
* *Dummy*: Son objetos que se envían, pero nunca se utilizan en el test.
Usualmente se usan para llenar parámetros.

* *Stub*: Es un objeto en el que configuras que cuando llames a un método devuelva un valor determinado.
Usualmente se usan para cosas que no importan al test.

* *Fake*: Es un objeto que implementado completamente y que funciona, como un objeto normal sin ser simulado,
pero se diferencia en que está falseando algo para hacer alguna cosa más fácil de probar.
Un ejemplo de esto podría ser un objeto que utiliza una base de datos en memoria en lugar de acceder
a consultar la base de datos de producción.

* *Spy*: Estos objetos guardan las acciones que se hacen sobre ellos. Hace una especie de seguimiento
sobre qué métodos se han llamado y con qué parámetros.

* *Mock*: Muy similar a un spy, pero no solo guardan las acciones que se hacen sobre ellos, también es
necesario configurar qué comportamiento esperas cuando alguien llame a alguno de sus métodos.
====

== ¿Cuál test double debo usar? 1/2
* Se recomienda seguir el PoLP (Principio de menor privilegio)
* Buscar la opción menos poderosa que pueda resolver el problema.

[NOTE.speaker]
====
Beneficios de usar PoLP:
* Declarativo
* Seguro
* Menos elementos
* Resistencia al cambio
====

== ¿Cuál test double debo usar? 2/2
* Siguiendo el principio sería:
** ¿No necesitamos usar test doubles? Entonces no los usemos
** ¿Me sirve un stub? Entonces uso un stub
** ¿Necesito más control? Vamos por un fake
** ¿Quiero controlar todo? Usemos mocks

== TDD
*Test driven development*

Proceso de escribir test antes de código de producción

== Red-Green-Refactor cycle
image::tdd-cycle.jpg[]
//Fuente: https://ayudalaravel.com/tdd-desarrollo-guiado-pruebas/

== Red-Green-Refactor steps
1. Agregar un test (Entiendo el propósito de la funcionalidad)
2. Ejecutar todos los test y ver si el nuevo test [red]#falla# (Debería fallar por las razones conocidas)
3. Escribir el mínimo código para que [green]#pase# el test
4. Ejecutar nuevamente el test (Valida el punto anterior)
5. [blue]#Refactorizar# el código (Se optimiza) *…​Repetir el proceso*

== Beneficios TDD
* Código con pruebas. No se pueden agregar nuevas funcionalidades sin test.
* Ciclo de desarrollo rápido y seguro.
* Confianza en el código y los tests.

== Algunas Librerías Java para test
* link:{https://junit.org/junit5/}[JUnit]
* link:{https://site.mockito.org/}[Mockito]
* link:{http://joel-costigliola.github.io/assertj/}[AssertJ]
* link:{https://cucumber.io/}[Cucumber]

== Algunas Librerías Android para test
* link:{http://robolectric.org/}[Robolectric]
* link:{https://developer.android.com/training/testing/espresso}[Espresso]

== Arquitectura Clean

== ¿Qué es arquitectura de software?

* Estructura de un Sistema compuesta de elementos [1] con propiedades visibles de forma externa y las relaciones que existen entre ellos. **Software Engineering Institute,SEI**.

[1] Definición abstracta: objetos, hilos, clases, componentes...

== ¿Qué NO es una Arquitectura de Software?

* Jerarquía de carpetas. Ej: paquetes en java.

* MVC o MVP. El uso del patrón MVC o MVP no implica una arquitectura.

* Estructura de un framework. Ej: Symfony, Angular, Android SDK, etc.

== Introducción a la Arquitectura Clean

"Architecture is about intent, not Frameworks"

*Robert C. Martin*

== Architecture is about intent, not Frameworks

* Una arquitectura se centra en lo que hace la aplicación, no en el framework o librerías que usa.

* El dominio o modelo de negocio (casos de uso y entidades) debe ser el núcleo la aplicación.

* Base de datos, Servicios Web, Framework, librerías, User Interface, etc. no es relevante para el modelo de negocio.

== Capas y Dependencias

== Dominio o Modelo de Negocio

image::dominio.png[background, size=auto]

== Dominio o Modelo de Negocio

* Lo más importante de la aplicación.

* No depende de ninguna otra capa.

* Formado por Casos de Usos (Interactors) y entidades

== Presentadores y Controladores

image::presenters.png[background, size=auto]

== Presentadores y Controladores

* Comunica las interfaces externas al dominio con los casos de uso.

* Adaptadores de datos según la capa.

== Interfaces externas

image::interfaces-externas.png[background, size=auto]

== Interfaces externas

* Framework o librerías que se usan para el desarrollo de la aplicación.

* Base de datos, Interfaz de Usuario, Servicios Web, etc.

== Regla de Dependencia

image::regla-de-dependencia.png[background, size=auto]

== Regla de Dependencia

* Las dependencias a nivel de código fuente sólo pueden apuntar hacia dentro.

* Una capa interna no puede usar elementos de una capa externa.

== ¿Por qué la Arquitectura Clean?

* Evolución constante de la aplicación con nuevas funcionalidades.

* Desarrollo paralelo con los servicios web.

* Requisitos: minimizar al máximo las incidencias. Desarrollar test.

* Posibilidad de incluir desarrolladores que no conozcan los frameworks (Android, Angular...)

== Conclusiones SOLID
* SRP implica que sólo debería haber un motivo por el que modificar una clase.
* Tener código cerrado a modificación y abierto a extensión nos da la máxima flexibilidad con el mínimo impacto.
* El principio de Liskov nos ayuda a utilizar la herencia de forma correcta

== Conclusiones SOLID
* El principio de segregación de interfaces nos ayuda a no obligar a ninguna clase a implementar métodos que no utiliza.


== Conclusiones Testing
* El uso de test agrega calidad a los sistemas
* Permiten hacer refactor con confianza
* Deben ser independientes a nivel de datos
* Mejora el diseño
* Existen variedad de estrategias y herramientas para implementarlos

== Conclusiones Arquitectura clean

* La definición de la arquitectura, integración con librerías, inyección de dependencias, etc. hace que el inicio sea lento.

* Al estar las funcionalidades distribuidas por capas, se crea la sensación de no encontrar el código o de estar perdido.

* El trabajar con capas te aísla de problemas que afectan a otras capas.

[NOTE.speaker]
====
Recomendación: crear un proyecto con todo esto definido y que sea la base de futuros proyectos.
====

== Conclusiones Arquitectura Clean

* El trabajar con abstracciones permite que el proyecto sea más flexible ante cambios.

* Reutilización de código. Toda la lógica está centrada en la capa de dominio que es accesible desde cualquier otra capa.

* Código testeable. No hay código acoplado que no permita falsear ciertos datos para comprobar distintos comportamientos.

include::{partials}/self.ad[]
